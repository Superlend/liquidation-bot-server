/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface UiPoolDataProviderV3Interface extends ethers.utils.Interface {
  functions: {
    'ETH_CURRENCY_UNIT()': FunctionFragment;
    'MKR_ADDRESS()': FunctionFragment;
    'bytes32ToString(bytes32)': FunctionFragment;
    'getReservesData(address)': FunctionFragment;
    'getReservesList(address)': FunctionFragment;
    'getUserReservesData(address,address)': FunctionFragment;
    'marketReferenceCurrencyPriceInUsdProxyAggregator()': FunctionFragment;
    'networkBaseTokenPriceInUsdProxyAggregator()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'ETH_CURRENCY_UNIT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MKR_ADDRESS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'bytes32ToString',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReservesData',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getReservesList',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'getUserReservesData',
    values: [string, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'marketReferenceCurrencyPriceInUsdProxyAggregator',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'networkBaseTokenPriceInUsdProxyAggregator',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'ETH_CURRENCY_UNIT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MKR_ADDRESS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'bytes32ToString',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReservesData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getReservesList',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getUserReservesData',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'marketReferenceCurrencyPriceInUsdProxyAggregator',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'networkBaseTokenPriceInUsdProxyAggregator',
    data: BytesLike,
  ): Result;

  events: {};
}

export type AggregatedReserveData = [
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  boolean,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  number,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  boolean,
  BigNumber,
  BigNumber,
  BigNumber,
  boolean,
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  BigNumber,
  number,
  number,
  number,
  string,
  string,
  boolean,
] & {
  underlyingAsset: string;
  name: string;
  symbol: string;
  decimals: BigNumber;
  baseLTVasCollateral: BigNumber;
  reserveLiquidationThreshold: BigNumber;
  reserveLiquidationBonus: BigNumber;
  reserveFactor: BigNumber;
  usageAsCollateralEnabled: boolean;
  borrowingEnabled: boolean;
  stableBorrowRateEnabled: boolean;
  isActive: boolean;
  isFrozen: boolean;
  liquidityIndex: BigNumber;
  variableBorrowIndex: BigNumber;
  liquidityRate: BigNumber;
  variableBorrowRate: BigNumber;
  stableBorrowRate: BigNumber;
  lastUpdateTimestamp: number;
  aTokenAddress: string;
  stableDebtTokenAddress: string;
  variableDebtTokenAddress: string;
  interestRateStrategyAddress: string;
  availableLiquidity: BigNumber;
  totalPrincipalStableDebt: BigNumber;
  averageStableRate: BigNumber;
  stableDebtLastUpdateTimestamp: BigNumber;
  totalScaledVariableDebt: BigNumber;
  priceInMarketReferenceCurrency: BigNumber;
  priceOracle: string;
  variableRateSlope1: BigNumber;
  variableRateSlope2: BigNumber;
  stableRateSlope1: BigNumber;
  stableRateSlope2: BigNumber;
  baseStableBorrowRate: BigNumber;
  baseVariableBorrowRate: BigNumber;
  optimalUsageRatio: BigNumber;
  isPaused: boolean;
  isSiloedBorrowing: boolean;
  accruedToTreasury: BigNumber;
  unbacked: BigNumber;
  isolationModeTotalDebt: BigNumber;
  flashLoanEnabled: boolean;
  debtCeiling: BigNumber;
  debtCeilingDecimals: BigNumber;
  eModeCategoryId: number;
  borrowCap: BigNumber;
  supplyCap: BigNumber;
  eModeLtv: number;
  eModeLiquidationThreshold: number;
  eModeLiquidationBonus: number;
  eModePriceSource: string;
  eModeLabel: string;
  borrowableInIsolation: boolean;
};

export type BaseCurrencyInfo = [BigNumber, BigNumber, BigNumber, number] & {
  marketReferenceCurrencyUnit: BigNumber;
  marketReferenceCurrencyPriceInUsd: BigNumber;
  networkBaseTokenPriceInUsd: BigNumber;
  networkBaseTokenPriceDecimals: number;
};

export interface UiPoolDataProviderV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: UiPoolDataProviderV3Interface;

  functions: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MKR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<[AggregatedReserveData[], BaseCurrencyInfo]>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<[string[]]>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          underlyingAsset: string;
          scaledATokenBalance: BigNumber;
          usageAsCollateralEnabledOnUser: boolean;
          stableBorrowRate: BigNumber;
          scaledVariableDebt: BigNumber;
          principalStableDebt: BigNumber;
          stableBorrowLastUpdateTimestamp: BigNumber;
        })[],
        number,
      ]
    >;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<[string]>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<[string]>;
  };

  ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

  MKR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  bytes32ToString(
    _bytes32: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  getReservesData(
    provider: string,
    overrides?: CallOverrides,
  ): Promise<[AggregatedReserveData[], BaseCurrencyInfo]>;

  getReservesList(
    provider: string,
    overrides?: CallOverrides,
  ): Promise<string[]>;

  getUserReservesData(
    provider: string,
    user: string,
    overrides?: CallOverrides,
  ): Promise<
    [
      ([
        string,
        BigNumber,
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        underlyingAsset: string;
        scaledATokenBalance: BigNumber;
        usageAsCollateralEnabledOnUser: boolean;
        stableBorrowRate: BigNumber;
        scaledVariableDebt: BigNumber;
        principalStableDebt: BigNumber;
        stableBorrowLastUpdateTimestamp: BigNumber;
      })[],
      number,
    ]
  >;

  marketReferenceCurrencyPriceInUsdProxyAggregator(
    overrides?: CallOverrides,
  ): Promise<string>;

  networkBaseTokenPriceInUsdProxyAggregator(
    overrides?: CallOverrides,
  ): Promise<string>;

  callStatic: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    MKR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<[AggregatedReserveData[], BaseCurrencyInfo]>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<string[]>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        ([
          string,
          BigNumber,
          boolean,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          underlyingAsset: string;
          scaledATokenBalance: BigNumber;
          usageAsCollateralEnabledOnUser: boolean;
          stableBorrowRate: BigNumber;
          scaledVariableDebt: BigNumber;
          principalStableDebt: BigNumber;
          stableBorrowLastUpdateTimestamp: BigNumber;
        })[],
        number,
      ]
    >;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<string>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<BigNumber>;

    MKR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_CURRENCY_UNIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MKR_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bytes32ToString(
      _bytes32: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReservesData(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReservesList(
      provider: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getUserReservesData(
      provider: string,
      user: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    marketReferenceCurrencyPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    networkBaseTokenPriceInUsdProxyAggregator(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}

export const abi = [
  {
    inputs: [
      {
        internalType: 'contract IEACAggregatorProxy',
        name: '_networkBaseTokenPriceInUsdProxyAggregator',
        type: 'address',
      },
      {
        internalType: 'contract IEACAggregatorProxy',
        name: '_marketReferenceCurrencyPriceInUsdProxyAggregator',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ETH_CURRENCY_UNIT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'MKR_ADDRESS',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: '_bytes32',
        type: 'bytes32',
      },
    ],
    name: 'bytes32ToString',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IPoolAddressesProvider',
        name: 'provider',
        type: 'address',
      },
    ],
    name: 'getReservesData',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'name',
            type: 'string',
          },
          {
            internalType: 'string',
            name: 'symbol',
            type: 'string',
          },
          {
            internalType: 'uint256',
            name: 'decimals',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'baseLTVasCollateral',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'reserveLiquidationThreshold',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'reserveLiquidationBonus',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'reserveFactor',
            type: 'uint256',
          },
          {
            internalType: 'bool',
            name: 'usageAsCollateralEnabled',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'borrowingEnabled',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'stableBorrowRateEnabled',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isActive',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isFrozen',
            type: 'bool',
          },
          {
            internalType: 'uint128',
            name: 'liquidityIndex',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'variableBorrowIndex',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'liquidityRate',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'variableBorrowRate',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'stableBorrowRate',
            type: 'uint128',
          },
          {
            internalType: 'uint40',
            name: 'lastUpdateTimestamp',
            type: 'uint40',
          },
          {
            internalType: 'address',
            name: 'aTokenAddress',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'stableDebtTokenAddress',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'variableDebtTokenAddress',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'interestRateStrategyAddress',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'availableLiquidity',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalPrincipalStableDebt',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'averageStableRate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'stableDebtLastUpdateTimestamp',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'totalScaledVariableDebt',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'priceInMarketReferenceCurrency',
            type: 'uint256',
          },
          {
            internalType: 'address',
            name: 'priceOracle',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'variableRateSlope1',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'variableRateSlope2',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'stableRateSlope1',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'stableRateSlope2',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'baseStableBorrowRate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'baseVariableBorrowRate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'optimalUsageRatio',
            type: 'uint256',
          },
          {
            internalType: 'bool',
            name: 'isPaused',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'isSiloedBorrowing',
            type: 'bool',
          },
          {
            internalType: 'uint128',
            name: 'accruedToTreasury',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'unbacked',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'isolationModeTotalDebt',
            type: 'uint128',
          },
          {
            internalType: 'bool',
            name: 'flashLoanEnabled',
            type: 'bool',
          },
          {
            internalType: 'uint256',
            name: 'debtCeiling',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'debtCeilingDecimals',
            type: 'uint256',
          },
          {
            internalType: 'uint8',
            name: 'eModeCategoryId',
            type: 'uint8',
          },
          {
            internalType: 'uint256',
            name: 'borrowCap',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'supplyCap',
            type: 'uint256',
          },
          {
            internalType: 'uint16',
            name: 'eModeLtv',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'eModeLiquidationThreshold',
            type: 'uint16',
          },
          {
            internalType: 'uint16',
            name: 'eModeLiquidationBonus',
            type: 'uint16',
          },
          {
            internalType: 'address',
            name: 'eModePriceSource',
            type: 'address',
          },
          {
            internalType: 'string',
            name: 'eModeLabel',
            type: 'string',
          },
          {
            internalType: 'bool',
            name: 'borrowableInIsolation',
            type: 'bool',
          },
        ],
        internalType: 'struct IUiPoolDataProviderV3.AggregatedReserveData[]',
        name: '',
        type: 'tuple[]',
      },
      {
        components: [
          {
            internalType: 'uint256',
            name: 'marketReferenceCurrencyUnit',
            type: 'uint256',
          },
          {
            internalType: 'int256',
            name: 'marketReferenceCurrencyPriceInUsd',
            type: 'int256',
          },
          {
            internalType: 'int256',
            name: 'networkBaseTokenPriceInUsd',
            type: 'int256',
          },
          {
            internalType: 'uint8',
            name: 'networkBaseTokenPriceDecimals',
            type: 'uint8',
          },
        ],
        internalType: 'struct IUiPoolDataProviderV3.BaseCurrencyInfo',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IPoolAddressesProvider',
        name: 'provider',
        type: 'address',
      },
    ],
    name: 'getReservesList',
    outputs: [
      {
        internalType: 'address[]',
        name: '',
        type: 'address[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'contract IPoolAddressesProvider',
        name: 'provider',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'user',
        type: 'address',
      },
    ],
    name: 'getUserReservesData',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'underlyingAsset',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'scaledATokenBalance',
            type: 'uint256',
          },
          {
            internalType: 'bool',
            name: 'usageAsCollateralEnabledOnUser',
            type: 'bool',
          },
          {
            internalType: 'uint256',
            name: 'stableBorrowRate',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'scaledVariableDebt',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'principalStableDebt',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'stableBorrowLastUpdateTimestamp',
            type: 'uint256',
          },
        ],
        internalType: 'struct IUiPoolDataProviderV3.UserReserveData[]',
        name: '',
        type: 'tuple[]',
      },
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'marketReferenceCurrencyPriceInUsdProxyAggregator',
    outputs: [
      {
        internalType: 'contract IEACAggregatorProxy',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'networkBaseTokenPriceInUsdProxyAggregator',
    outputs: [
      {
        internalType: 'contract IEACAggregatorProxy',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];
